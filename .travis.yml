dist: xenial
sudo: required
group: bluezone
language: generic

# Environment variables (setup endpoint to IBM github)
env:
  global:
  - OCTOKIT_API_ENDPOINT="https://github.ibm.com/api/v3/"

branches:
  only:
    - master
    - /^[0-9]+\..*$/
    - /^v[0-9]+\..*$/
    - /^release-[0-9]+\..*$/
    - /^ga-[0-9]*-[0-9]*-[0-9]*/

  # The /^ga-[0-9]+.*$/ pattern is for tag testing only, so it can be removed when no one needs to test tagging against commits.

before_install:
  - make init
  # Clone build tools & set tools path for follow on processing
  # The clone command will use the ssh key from the travis settings to clone the repo from github.ibm.com
  # Comment out now as we cannot pull from these content-tools...may need new linter on Red Hat side
  # - if [[ ! -z "$BRANCH_OVERRIDE" ]] ; then
  #     git clone -b $BRANCH_OVERRIDE https://${GITHUB_USER_ESCAPE}:${GITHUB_TOKEN}@github.ibm.com/IBMPrivateCloud/content-tools.git;
  #   else 
  #     git clone https://${GITHUB_USER_ESCAPE}:${GITHUB_TOKEN}@github.ibm.com/IBMPrivateCloud/content-tools.git;
  #   fi
  - export toolsPath=`pwd`/content-tools/travis-tools/
  # Install dependencies & determine chart delta 
  # see above, can't pull content-tools now
  # - $toolsPath/build/bin/installDependencies.sh | true
  # - export changeList=`$toolsPath/build/bin/determineChartDelta.sh | tee determineChartDelta.out | grep 'return determineChartDelta:' | cut -f2 -d:` && cat determineChartDelta.out
   
install:
  # Package for release 
  # - if [[ ! -z "$TRAVIS_TAG" ]] ; then $toolsPath/release/bin/package.sh; fi
  # Lint and install/test charts (if cv-tests exist)
  # - $toolsPath/cv-test/bin/validateContent.sh | true

before_script:
  - make tool


jobs:  
  include:
    - stage: "lint"
      name: "Lint"
#       script: 
#         - make lint
#         - make cv-lint

    - stage: test-deploy
      name: "Deploy to Scratch"
      if: type = pull_request
      script:
        - make build
        - make release-helm-test


    - stage: deploy-master
      name: "Deploy to Master"
      if: (branch = master) AND (type = push)
      script:
        - make build
        - make release-helm

deploy:
  # scp helm repo(s) to location identified (Note: SSHPASS env variable must contain password)
  - provider: script
    skip_cleanup: true
    script:  $toolsPath/build/bin/deployHelmRepo.sh
    on:
      all_branches: true
  # Publish tagged release
  - provider: releases
    skip_cleanup: true
    api_key: $GITHUB_TOKEN
    file_glob: true
    file: repo/stable/*
    on:
      tags: true

